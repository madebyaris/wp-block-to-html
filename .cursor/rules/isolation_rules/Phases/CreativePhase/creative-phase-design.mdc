---
description: Creative phase design rules for UI/UX design mode
globs: "**/design*/**", "**/ui*/**", "**/ux*/**", "**/component*/**"
alwaysApply: false
---

# CREATIVE PHASE: DESIGN MODE RULES

> **TL;DR:** This document provides specialized rules for design-focused creative phases, ensuring structured UI/UX design decisions, platform-aware responsive design, and comprehensive component documentation.

## üé® DESIGN MODE ACTIVATION CRITERIA

### When to Use Design Mode
- UI/UX component design required
- Dashboard or layout design needed
- Design system creation/updates
- Visual design decisions required
- Component library development
- Responsive design implementation

### Design Mode Prerequisites
```markdown
‚úÖ DESIGN MODE PREREQUISITES
‚ñ° Memory Bank structure verified
‚ñ° Platform detection completed
‚ñ° Style guide available or creatable
‚ñ° Project brief provides context
‚ñ° Design requirements documented
‚ñ° Target devices/platforms identified
```

## üèóÔ∏è DESIGN WORKFLOW ENFORCEMENT

### Mandatory Design Process
```mermaid
graph TD
    Start["üé® DESIGN MODE START"] --> Validate["üîç STRUCTURE VALIDATION"]
    Validate --> Platform["üîç PLATFORM DETECTION"]
    Platform --> Context["üìö CONTEXT LOADING"]
    Context --> Focus["‚ö° CONTEXT OPTIMIZATION"]

    Focus --> DesignType{"üéØ DESIGN TYPE"}
    DesignType -->|"Component"| Component["üß© COMPONENT DESIGN"]
    DesignType -->|"Dashboard"| Dashboard["üìä DASHBOARD DESIGN"]
    DesignType -->|"Layout"| Layout["üìê LAYOUT DESIGN"]
    DesignType -->|"Flow"| Flow["üîÑ USER FLOW DESIGN"]

    Component --> Responsive["üì± RESPONSIVE VALIDATION"]
    Dashboard --> Responsive
    Layout --> Responsive
    Flow --> Responsive

    Responsive --> Documentation["üìã DESIGN DOCUMENTATION"]
    Documentation --> StyleGuide["üìù STYLE GUIDE UPDATE"]
    StyleGuide --> Complete["‚úÖ DESIGN COMPLETE"]

    style Start fill:#e91e63,stroke:#ad1457,color:white
    style Platform fill:#ff5722,stroke:#d84315,color:white
    style Responsive fill:#4caf50,stroke:#2e7d32,color:white
    style Complete fill:#2196f3,stroke:#1565c0,color:white
```

## üîç PLATFORM-AWARE DESIGN RULES

### Automatic Platform Detection
Before any design work, the system MUST:
1. Detect project platform (Web/React Native/Flutter/iOS/Android)
2. Load appropriate responsive strategy
3. Apply platform-specific design guidelines
4. Set correct touch targets and breakpoints

### Platform-Specific Design Requirements

#### üåê Web Projects
```markdown
‚úÖ WEB DESIGN REQUIREMENTS
‚ñ° Mobile-first responsive design (min-width media queries)
‚ñ° Touch targets minimum 44px for mobile viewports
‚ñ° CSS Grid/Flexbox for responsive layouts
‚ñ° Breakpoints: 640px (sm), 768px (md), 1024px (lg), 1280px (xl)
‚ñ° Progressive enhancement approach
‚ñ° Accessibility compliance (WCAG AA)
‚ñ° Cross-browser compatibility considerations
```

#### üì± Mobile App Projects
```markdown
‚úÖ MOBILE APP DESIGN REQUIREMENTS
‚ñ° Platform-specific touch targets (44pt iOS / 48dp Android)
‚ñ° Safe area handling for notched devices
‚ñ° Platform design guidelines (HIG/Material Design)
‚ñ° Orientation change handling
‚ñ° Platform-specific navigation patterns
‚ñ° Accessibility features (VoiceOver/TalkBack)
‚ñ° Performance optimization for device capabilities
```

## ‚ö° CONTEXT OPTIMIZATION RULES

### Component Isolation Strategy
Design work MUST be broken into focused components:

1. **Single Component Focus**: Work on one component at a time
2. **Progressive Disclosure**: Start simple, add complexity gradually
3. **Memory Chunking**: Keep related design decisions together
4. **Validation Checkpoints**: Validate each component before proceeding

### Context Management Protocol
```markdown
üîÑ CONTEXT OPTIMIZATION PROTOCOL
1. Load only essential files for current design component
2. Use progressive disclosure for complex designs
3. Document decisions immediately to preserve context
4. Validate against style guide at each checkpoint
5. Update Memory Bank with design progress
```

## üìã DESIGN DOCUMENTATION REQUIREMENTS

### Mandatory Documentation Elements
Every design component MUST include:

```markdown
# Component: [Name]

## üéØ Purpose & Context
[What this component does and why]

## üé® Visual Specifications
- **Colors**: [Specific color values from style guide]
- **Typography**: [Font families, sizes, weights]
- **Spacing**: [Margins, padding using design system]
- **Layout**: [Grid system, positioning]

## üì± Responsive Behavior
### Mobile (< 640px)
[Mobile-specific adaptations]

### Tablet (640px - 1024px)
[Tablet-specific adaptations]

### Desktop (> 1024px)
[Desktop-specific adaptations]

## ‚ôø Accessibility Requirements
- **ARIA**: [Required ARIA attributes]
- **Keyboard**: [Keyboard navigation support]
- **Screen Reader**: [Screen reader compatibility]
- **Color Contrast**: [Contrast ratios verified]

## üîß Component API (if applicable)
[Props, slots, events, variants]

## üß™ Usage Examples
[Implementation examples and use cases]

## ‚úÖ Design Validation
‚ñ° Meets functional requirements
‚ñ° Follows style guide
‚ñ° Responsive across all breakpoints
‚ñ° Accessibility compliant
‚ñ° Performance optimized
‚ñ° Cross-platform compatible (if applicable)
```

## üö® DESIGN VALIDATION CHECKPOINTS

### Pre-Design Validation
```bash
# MANDATORY: Run before starting design work
1. Verify Memory Bank structure exists
2. Confirm platform detection completed
3. Load style guide or create if missing
4. Validate project context and requirements
5. Ensure responsive strategy is defined
```

### Mid-Design Validation
```bash
# MANDATORY: Run during design process
1. Validate component against style guide
2. Check responsive behavior across breakpoints
3. Verify accessibility requirements
4. Test interaction states and variants
5. Document design decisions immediately
```

### Post-Design Validation
```bash
# MANDATORY: Run before completing design
1. Final responsive validation across all platforms
2. Accessibility audit completion
3. Style guide compliance verification
4. Implementation readiness check
5. Documentation completeness review
```

## üîÑ INTEGRATION WITH OTHER MODES

### Transition to IMPLEMENT Mode
Design mode completion triggers:
```markdown
‚úÖ DESIGN COMPLETE CHECKLIST
‚ñ° All components documented with specifications
‚ñ° Responsive behavior defined for all breakpoints
‚ñ° Accessibility requirements documented
‚ñ° Style guide updated with new patterns
‚ñ° Implementation notes provided for developers
‚ñ° Asset requirements identified (icons, images, fonts)
‚ñ° Dependencies and libraries specified
‚ñ° Build sequence planned

üöÄ READY FOR IMPLEMENT MODE
```

### Integration with PLAN Mode
Design decisions inform implementation planning:
- Component complexity affects development time estimates
- Design system choices influence technology stack
- Responsive requirements impact development approach
- Accessibility needs affect implementation strategy

## üéØ DESIGN EXCELLENCE CRITERIA

### Creative Excellence Standards
```markdown
‚úÖ DESIGN EXCELLENCE CHECKLIST
‚ñ° User-centered design approach applied
‚ñ° Multiple design options explored and evaluated
‚ñ° Design system consistency maintained
‚ñ° Innovation balanced with usability
‚ñ° Platform-specific patterns respected
‚ñ° Performance implications considered
‚ñ° Accessibility integrated from the start
‚ñ° Scalability and maintainability planned
```

### Quality Assurance Integration
Design mode integrates with QA validation:
- Automated responsive testing
- Accessibility compliance verification
- Style guide adherence checking
- Cross-platform compatibility validation
- Performance impact assessment

---

**Remember**: Design mode is about creating excellent, platform-aware, accessible designs that are ready for implementation. Every design decision should be documented, validated, and aligned with the overall project goals.
